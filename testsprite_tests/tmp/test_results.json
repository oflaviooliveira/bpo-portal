[
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "cb4fc1e5-b0ec-4037-b1a5-3a6a50755eaa",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC001-test authentication system with multi tenant and rbac",
    "description": "Verify that the authentication system correctly supports multi-tenant login and enforces role-based access control for SUPER_ADMIN and CLIENT_USER roles, ensuring tenant isolation and proper access restrictions.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_authentication_system_multi_tenant_rbac():\n    headers = {\"Content-Type\": \"application/json\"}\n    # Sample tenants and users with credentials and expected roles\n    tenants = [\n        {\n            \"tenant\": \"tenant_superadmin\",\n            \"username\": \"superadmin_user\",\n            \"password\": \"superadmin_pass\",\n            \"role\": \"SUPER_ADMIN\"\n        },\n        {\n            \"tenant\": \"tenant_clientuser\",\n            \"username\": \"clientuser_user\",\n            \"password\": \"clientuser_pass\",\n            \"role\": \"CLIENT_USER\"\n        }\n    ]\n\n    tokens = {}\n\n    # Login for each tenant/user and verify JSON response and token presence\n    for user in tenants:\n        login_payload = {\n            \"tenant\": user[\"tenant\"],\n            \"username\": user[\"username\"],\n            \"password\": user[\"password\"]\n        }\n        try:\n            resp = requests.post(f\"{BASE_URL}/api/login\", json=login_payload, headers=headers, timeout=TIMEOUT)\n        except Exception as e:\n            assert False, f\"Login request failed for {user['role']} ({user['tenant']}): {e}\"\n        assert resp.status_code == 200, f\"Login failed for {user['role']} ({user['tenant']}), status code: {resp.status_code}\"\n        try:\n            json_resp = resp.json()\n        except Exception:\n            assert False, f\"Login response not JSON for {user['role']} ({user['tenant']})\"\n        assert \"token\" in json_resp and isinstance(json_resp[\"token\"], str) and json_resp[\"token\"], f\"Token missing or invalid in login response for {user['role']} ({user['tenant']})\"\n        tokens[user[\"role\"]] = json_resp[\"token\"]\n\n    # Verify that accessing upload endpoints returns JSON and is role/tenant sensitive\n\n    # Define upload endpoints to test\n    upload_endpoints = [\n        \"/api/file/upload\",\n        \"/api/documents/upload\"\n    ]\n\n    # Test upload endpoint without authentication (should reject or return JSON error)\n    for endpoint in upload_endpoints:\n        try:\n            resp = requests.post(f\"{BASE_URL}{endpoint}\", timeout=TIMEOUT)\n        except Exception as e:\n            assert False, f\"Unauthenticated POST to {endpoint} failed: {e}\"\n        try:\n            resp.json()\n        except Exception:\n            assert False, f\"Unauthenticated response from {endpoint} is not JSON\"\n        # Commonly unauthorized or forbidden expected; status code 401 or 403 or 400 or 422 etc\n        assert resp.status_code in {400,401,403,422}, f\"Unexpected status code from unauthenticated POST {endpoint}: {resp.status_code}\"\n\n    # Test upload endpoints with each tenant token to verify tenant isolation and RBAC enforcement\n    # For the sake of the test, send empty file data multipart/form-data or json placeholder and check response JSON (not HTML)\n    for role, token in tokens.items():\n        auth_headers = {\n            \"Authorization\": f\"Bearer {token}\",\n        }\n        for endpoint in upload_endpoints:\n            # For upload, provide a minimal valid file upload request.\n            # Using files param with empty content to check response type and access control.\n            files = {\n                \"file\": (\"test.txt\", b\"Test content\", \"text/plain\")\n            }\n            try:\n                resp = requests.post(f\"{BASE_URL}{endpoint}\", headers=auth_headers, files=files, timeout=TIMEOUT)\n            except Exception as e:\n                assert False, f\"Authenticated POST to {endpoint} failed for role {role}: {e}\"\n            assert resp.status_code in {200, 201, 400, 401, 403, 422}, f\"Unexpected status code {resp.status_code} for {endpoint} with role {role}\"\n            try:\n                json_resp = resp.json()\n            except Exception:\n                assert False, f\"Response from {endpoint} with role {role} is not JSON\"\n\n            # Role-based access control check:\n            # SUPER_ADMIN should have access, CLIENT_USER may have restricted access or specific errors\n            if role == \"SUPER_ADMIN\":\n                assert resp.status_code in {200,201,400,422}, f\"SUPER_ADMIN should have allowed or validation error responses at {endpoint}, got {resp.status_code}\"\n            elif role == \"CLIENT_USER\":\n                # CLIENT_USER allowed or forbidden depending on API design. Accept 200, 201 or 403 for forbidden.\n                assert resp.status_code in {200,201,403,422}, f\"CLIENT_USER unexpected status code at {endpoint}: {resp.status_code}\"\n\n    # Finally check /api/login endpoint returns JSON error on bad credentials, no HTML\n    bad_login_payload = {\"tenant\": \"invalid_tenant\", \"username\": \"invalid\", \"password\": \"invalid\"}\n    try:\n        resp = requests.post(f\"{BASE_URL}/api/login\", json=bad_login_payload, headers=headers, timeout=TIMEOUT)\n    except Exception as e:\n        assert False, f\"Login request with bad credentials failed unexpectedly: {e}\"\n    assert resp.status_code in {400,401,403}, \"Bad login credentials should return 400/401/403 status code\"\n    try:\n        resp.json()\n    except Exception:\n        assert False, \"Bad login credentials response is not JSON\"\n\ntest_authentication_system_multi_tenant_rbac()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 108, in <module>\n  File \"<string>\", line 37, in test_authentication_system_multi_tenant_rbac\nAssertionError: Login failed for SUPER_ADMIN (tenant_superadmin), status code: 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.528Z",
    "modified": "2025-09-17T19:59:30.164Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "eafb7ce4-8c16-4831-9980-a60181728e67",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC002-test document upload and lifecycle management",
    "description": "Validate the complete document lifecycle including upload, automated OCR and AI processing, validation, status tracking, and archival, ensuring correct workflow transitions and data accuracy.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_document_upload_and_lifecycle_management():\n    session = requests.Session()\n    try:\n        # 1. Test authentication endpoint /api/login returns JSON\n        login_payload = {\n            \"username\": \"testclientuser\",\n            \"password\": \"TestPassword123!\"\n        }\n        login_headers = {\"Content-Type\": \"application/json\"}\n        login_resp = session.post(\n            f\"{BASE_URL}/api/login\",\n            json=login_payload,\n            headers=login_headers,\n            timeout=TIMEOUT\n        )\n        # Validate HTTP status and JSON content type\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        assert \"application/json\" in login_resp.headers.get(\"Content-Type\", \"\"), \\\n            \"Login response Content-Type is not application/json\"\n        login_json = login_resp.json()\n        assert \"token\" in login_json or \"accessToken\" in login_json, \\\n            \"Login response JSON should contain token or accessToken\"\n\n        # Use token for authenticated requests if present (assume Bearer token)\n        auth_token = login_json.get(\"token\") or login_json.get(\"accessToken\")\n        assert auth_token, \"Authentication token missing in login response\"\n        auth_headers = {\n            \"Authorization\": f\"Bearer {auth_token}\"\n        }\n\n        # 2. Test /api/file/upload endpoint - upload a small dummy file and check JSON response\n        file_upload_url = f\"{BASE_URL}/api/file/upload\"\n        file_content = b\"Test file content for upload endpoint\"\n        files = {\n            \"file\": (\"testfile.txt\", file_content, \"text/plain\")\n        }\n        file_upload_resp = session.post(\n            file_upload_url,\n            files=files,\n            headers=auth_headers,\n            timeout=TIMEOUT\n        )\n        assert file_upload_resp.status_code == 200, f\"/api/file/upload returned status {file_upload_resp.status_code}\"\n        assert \"application/json\" in file_upload_resp.headers.get(\"Content-Type\", \"\"), \\\n            \"/api/file/upload response Content-Type is not application/json\"\n        file_upload_json = file_upload_resp.json()\n        # Validate essential fields in response (example: fileId, status or similar)\n        assert isinstance(file_upload_json, dict), \"File upload response is not a JSON object\"\n        assert \"fileId\" in file_upload_json or \"id\" in file_upload_json, \"No file identifier in upload response\"\n\n        # 3. Test /api/documents/upload endpoint - upload same dummy file and check JSON response\n        documents_upload_url = f\"{BASE_URL}/api/documents/upload\"\n        files = {\n            \"file\": (\"testdoc.pdf\", file_content, \"application/pdf\")\n        }\n        documents_upload_resp = session.post(\n            documents_upload_url,\n            files=files,\n            headers=auth_headers,\n            timeout=TIMEOUT\n        )\n        assert documents_upload_resp.status_code == 200, f\"/api/documents/upload returned status {documents_upload_resp.status_code}\"\n        assert \"application/json\" in documents_upload_resp.headers.get(\"Content-Type\", \"\"), \\\n            \"/api/documents/upload response Content-Type is not application/json\"\n        documents_upload_json = documents_upload_resp.json()\n        assert isinstance(documents_upload_json, dict), \"Documents upload response is not a JSON object\"\n        # Validate expected keys for document upload response (example: documentId, status)\n        assert \"documentId\" in documents_upload_json or \"id\" in documents_upload_json, \"No document identifier in upload response\"\n        assert \"status\" in documents_upload_json, \"No status in document upload response\"\n\n        # Optional: Validate workflow status transition keys exist (basic check)\n        expected_status_values = [\"RECEBIDO\", \"VALIDANDO\", \"PAGO_A_CONCILIAR\", \"EM_CONCILIACAO\", \"ARQUIVADO\"]\n        assert documents_upload_json[\"status\"] in expected_status_values, \\\n            f\"Unexpected document status: {documents_upload_json['status']}\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n    except ValueError as e:\n        assert False, f\"Response content is not valid JSON: {e}\"\n\ntest_document_upload_and_lifecycle_management()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 86, in <module>\n  File \"<string>\", line 22, in test_document_upload_and_lifecycle_management\nAssertionError: Login failed with status 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.536Z",
    "modified": "2025-09-17T19:59:30.868Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "4f8414f1-4285-4827-8e4a-330dfb7ee3a2",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC003-test ocr processing with multiple strategies and fallback",
    "description": "Test the OCR processing endpoint to ensure it uses multiple extraction strategies with confidence scoring and fallback mechanisms, providing accurate text extraction from various document formats.",
    "code": "import requests\nimport os\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_ocr_processing_with_multiple_strategies_and_fallback():\n    # Step 1: Authenticate (assuming /api/login requires username and password to get token)\n    login_url = f\"{BASE_URL}/api/login\"\n    login_payload = {\n        \"username\": \"clientuser\",\n        \"password\": \"clientpassword\"\n    }\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_resp.headers.get(\"Content-Type\") and \"application/json\" in login_resp.headers.get(\"Content-Type\"), \\\n            f\"/api/login did not return JSON content type, got: {login_resp.headers.get('Content-Type')}\"\n        login_resp.raise_for_status()\n        login_json = login_resp.json()\n        assert \"token\" in login_json, \"Login response JSON does not contain token\"\n        token = login_json[\"token\"]\n    except requests.RequestException as e:\n        raise AssertionError(f\"Login request failed: {e}\")\n\n    auth_headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Accept\": \"application/json\"\n    }\n\n    # Step 2: Prepare a sample document file to upload for OCR processing\n    # We simulate multi-format by using a PDF file. We'll create a small dummy PDF file on the fly.\n    # For this test, create a minimal PDF content binary in-memory\n    pdf_content = b\"%PDF-1.4\\n1 0 obj\\n<<>>\\nendobj\\ntrailer\\n<<>>\\nstartxref\\n0\\n%%EOF\"\n\n    files = {\n        \"file\": (\"sample.pdf\", pdf_content, \"application/pdf\")\n    }\n\n    # Test upload to /api/file/upload first\n    upload_file_url = f\"{BASE_URL}/api/file/upload\"\n    try:\n        upload_resp = requests.post(upload_file_url, headers=auth_headers, files=files, timeout=TIMEOUT)\n        assert upload_resp.headers.get(\"Content-Type\") and \"application/json\" in upload_resp.headers.get(\"Content-Type\"), \\\n            f\"/api/file/upload did not return JSON content type, got: {upload_resp.headers.get('Content-Type')}\"\n        upload_resp.raise_for_status()\n        upload_json = upload_resp.json()\n        # Expect uploaded file data including an ID or filename reference for OCR processing\n        assert \"fileId\" in upload_json or \"filename\" in upload_json, \"Upload response missing file identifier\"\n        file_identifier = upload_json.get(\"fileId\") or upload_json.get(\"filename\")\n    except requests.RequestException as e:\n        raise AssertionError(f\"File upload failed: {e}\")\n\n    # Step 3: Upload document via /api/documents/upload to initiate document processing including OCR\n    upload_doc_url = f\"{BASE_URL}/api/documents/upload\"\n    # The API likely expects file and possibly metadata; re-use same file\n    try:\n        doc_upload_resp = requests.post(upload_doc_url, headers=auth_headers, files=files, timeout=TIMEOUT)\n        assert doc_upload_resp.headers.get(\"Content-Type\") and \"application/json\" in doc_upload_resp.headers.get(\"Content-Type\"), \\\n            f\"/api/documents/upload did not return JSON content type, got: {doc_upload_resp.headers.get('Content-Type')}\"\n        doc_upload_resp.raise_for_status()\n        doc_upload_json = doc_upload_resp.json()\n        # The response should include OCR processing results or document id for retrieval\n        assert \"documentId\" in doc_upload_json or \"ocrResult\" in doc_upload_json, \\\n            \"Document upload response missing documentId or ocrResult\"\n        document_id = doc_upload_json.get(\"documentId\")\n        ocr_result = doc_upload_json.get(\"ocrResult\")\n    except requests.RequestException as e:\n        raise AssertionError(f\"Document upload failed: {e}\")\n\n    # Step 4: If the response does not contain OCR result, poll or request OCR result separately (not provided explicitly in PRD)\n    # We'll do a GET /api/documents/{id}/ocr if documentId available to verify OCR processing and fallback\n    if document_id:\n        ocr_status_url = f\"{BASE_URL}/api/documents/{document_id}/ocr\"\n        try:\n            ocr_status_resp = requests.get(ocr_status_url, headers=auth_headers, timeout=TIMEOUT)\n            assert ocr_status_resp.headers.get(\"Content-Type\") and \"application/json\" in ocr_status_resp.headers.get(\"Content-Type\"), \\\n                f\"GET {ocr_status_url} did not return JSON content type, got: {ocr_status_resp.headers.get('Content-Type')}\"\n            ocr_status_resp.raise_for_status()\n            ocr_status_json = ocr_status_resp.json()\n            # Validate presence of OCR text, confidence scores, and fallback indicator\n            assert \"extractedText\" in ocr_status_json, \"OCR result missing extractedText\"\n            assert \"strategiesUsed\" in ocr_status_json, \"OCR result missing strategiesUsed\"\n            assert isinstance(ocr_status_json[\"strategiesUsed\"], list) and len(ocr_status_json[\"strategiesUsed\"]) > 0, \\\n                \"OCR strategiesUsed should be a non-empty list\"\n            # Check confidence scores keys present\n            assert \"confidenceScores\" in ocr_status_json and isinstance(ocr_status_json[\"confidenceScores\"], dict), \\\n                \"OCR confidenceScores missing or not a dict\"\n            # Validate fallback mechanism flag present (boolean)\n            assert \"fallbackUsed\" in ocr_status_json and isinstance(ocr_status_json[\"fallbackUsed\"], bool), \\\n                \"OCR fallbackUsed flag missing or not boolean\"\n        except requests.RequestException as e:\n            raise AssertionError(f\"OCR status request failed: {e}\")\n    else:\n        # If OCR result was returned in document upload response, we validate it locally\n        assert isinstance(ocr_result, dict), \"ocrResult should be a dictionary\"\n        assert \"extractedText\" in ocr_result, \"OCR result missing extractedText\"\n        assert \"strategiesUsed\" in ocr_result and isinstance(ocr_result[\"strategiesUsed\"], list) and len(ocr_result[\"strategiesUsed\"]) > 0, \\\n            \"OCR strategiesUsed should be a non-empty list in ocrResult\"\n        assert \"confidenceScores\" in ocr_result and isinstance(ocr_result[\"confidenceScores\"], dict), \\\n            \"OCR confidenceScores missing or not a dict in ocrResult\"\n        assert \"fallbackUsed\" in ocr_result and isinstance(ocr_result[\"fallbackUsed\"], bool), \\\n            \"OCR fallbackUsed flag missing or not boolean in ocrResult\"\n\n# Execute the test function\ntest_ocr_processing_with_multiple_strategies_and_fallback()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 21, in test_ocr_processing_with_multiple_strategies_and_fallback\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3001/api/login\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 108, in <module>\n  File \"<string>\", line 26, in test_ocr_processing_with_multiple_strategies_and_fallback\nAssertionError: Login request failed: 401 Client Error: Unauthorized for url: http://localhost:3001/api/login\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.542Z",
    "modified": "2025-09-17T19:59:30.869Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "273d2012-d625-4a99-b357-a1b33fd10f4f",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC004-test ai multi provider document analysis and validation",
    "description": "Verify the AI integration endpoint correctly analyzes, categorizes, and validates document data using multiple AI providers like OpenAI GPT and GLM-4.5, ensuring high accuracy and proper prompt usage per document type.",
    "code": "import requests\nimport json\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_ai_multi_provider_document_analysis_and_validation():\n    session = requests.Session()\n\n    # 1. Test /api/login endpoint - POST expecting JSON response\n    login_url = f\"{BASE_URL}/api/login\"\n    login_payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n    try:\n        login_response = session.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_response.headers.get(\"Content-Type\", \"\").startswith(\"application/json\"), \"Login response not JSON\"\n        assert login_response.status_code == 200, f\"Unexpected login status code: {login_response.status_code}\"\n        login_json = login_response.json()\n        assert \"token\" in login_json or \"accessToken\" in login_json or \"session\" in login_json, \"Login response missing token/session\"\n    except requests.RequestException as e:\n        assert False, f\"Login request failed: {e}\"\n\n    # Prepare auth header if token present\n    token = None\n    if \"token\" in login_json:\n        token = login_json[\"token\"]\n    elif \"accessToken\" in login_json:\n        token = login_json[\"accessToken\"]\n    auth_headers = {\"Authorization\": f\"Bearer {token}\"} if token else {}\n\n    # 2. Test /api/file/upload endpoint - POST expecting JSON response\n    file_upload_url = f\"{BASE_URL}/api/file/upload\"\n    # Prepare a minimal dummy file content for upload\n    file_content = b\"Dummy file content for AI multi-provider test\"\n    files = {\"file\": (\"testfile.txt\", file_content, \"text/plain\")}\n    try:\n        upload_response = session.post(file_upload_url, headers=auth_headers, files=files, timeout=TIMEOUT)\n        assert upload_response.headers.get(\"Content-Type\", \"\").startswith(\"application/json\"), \"File upload response not JSON\"\n        assert upload_response.status_code in (200, 201), f\"Unexpected file upload status code: {upload_response.status_code}\"\n        upload_json = upload_response.json()\n        # Validate expected keys in response related to uploaded file info or document ID\n        assert any(k in upload_json for k in (\"fileId\", \"id\", \"documentId\")), \"File upload response missing file/document ID\"\n    except requests.RequestException as e:\n        assert False, f\"File upload request failed: {e}\"\n\n    # 3. Test /api/documents/upload endpoint - POST expecting JSON response\n    documents_upload_url = f\"{BASE_URL}/api/documents/upload\"\n    # Use the previously uploaded file info if available to simulate document upload\n    # If upload_json has an id for the uploaded file, include it; else, send minimal data\n    document_upload_payload = {\n        \"documentType\": \"PAGO\",\n        \"aiProviders\": [\"OpenAI_GPT\", \"GLM-4.5\"],\n        \"filename\": \"testfile.txt\",\n        \"metadata\": {\"source\": \"unittest\"},\n    }\n    # If a fileId or documentId from /api/file/upload is available, include it as reference\n    file_id = None\n    for key in (\"fileId\", \"id\", \"documentId\"):\n        if key in upload_json:\n            file_id = upload_json[key]\n            break\n    if file_id:\n        document_upload_payload[\"fileId\"] = file_id\n\n    # For this endpoint, assume it expects multipart/form-data with file and JSON fields or JSON body\n    # Try JSON body first\n    try:\n        doc_upload_response = session.post(documents_upload_url, headers={**auth_headers, \"Content-Type\": \"application/json\"}, json=document_upload_payload, timeout=TIMEOUT)\n        # If server rejects JSON, fallback to multipart upload with file and metadata\n        if doc_upload_response.status_code == 415 or doc_upload_response.status_code >= 400:\n            # Retry with multipart/form-data including file again and metadata as fields\n            multipart_data = {\n                \"documentType\": (None, document_upload_payload[\"documentType\"]),\n                \"aiProviders\": (None, json.dumps(document_upload_payload[\"aiProviders\"])),\n                \"filename\": (None, document_upload_payload[\"filename\"]),\n                \"metadata\": (None, json.dumps(document_upload_payload[\"metadata\"])),\n            }\n            if file_id:\n                multipart_data[\"fileId\"] = (None, str(file_id))\n            # Include file content again\n            multipart_files = {\n                **multipart_data,\n                \"file\": (\"testfile.txt\", file_content, \"text/plain\"),\n            }\n            doc_upload_response = session.post(documents_upload_url, headers=auth_headers, files=multipart_files, timeout=TIMEOUT)\n\n        assert doc_upload_response.headers.get(\"Content-Type\", \"\").startswith(\"application/json\"), \"Documents upload response not JSON\"\n        assert doc_upload_response.status_code in (200, 201), f\"Unexpected documents upload status code: {doc_upload_response.status_code}\"\n        doc_upload_json = doc_upload_response.json()\n\n        # Validate AI analysis results in the response if available\n        # Check presence of keys indicating AI providers results or document validation status\n        assert \"analysisResults\" in doc_upload_json or \"validationStatus\" in doc_upload_json or \"categories\" in doc_upload_json, \\\n            \"Documents upload response missing AI analysis or validation results\"\n\n    except requests.RequestException as e:\n        assert False, f\"Documents upload request failed: {e}\"\n\ntest_ai_multi_provider_document_analysis_and_validation()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 101, in <module>\n  File \"<string>\", line 19, in test_ai_multi_provider_document_analysis_and_validation\nAssertionError: Unexpected login status code: 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.548Z",
    "modified": "2025-09-17T19:59:29.455Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "9cfc1a3c-2371-42f5-84d2-48c9de89309b",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC005-test multi tenant data isolation and row level security",
    "description": "Ensure that all API endpoints enforce multi-tenant data isolation using Row Level Security policies, preventing any cross-tenant data access or leaks.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_multi_tenant_data_isolation_and_row_level_security():\n    \"\"\"Ensure upload and login endpoints enforce multi-tenant isolation and return JSON, not HTML.\"\"\"\n\n    headers = {\n        'Accept': 'application/json',\n    }\n\n    # Test /api/login endpoint with invalid credentials to check JSON error response format\n    login_url = f\"{BASE_URL}/api/login\"\n    login_payload = {\n        \"username\": \"nonexistent_user\",\n        \"password\": \"wrongpassword\"\n    }\n    try:\n        login_response = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Login request failed unexpectedly: {e}\"\n    assert login_response.headers.get('Content-Type', '').startswith('application/json'), \\\n        f\"Expected JSON response content-type for /api/login, got {login_response.headers.get('Content-Type')}\"\n    assert login_response.status_code in (400, 401, 403), \\\n        f\"Expected 4xx status code for invalid login, got {login_response.status_code}\"\n    try:\n        login_json = login_response.json()\n    except Exception as e:\n        assert False, f\"Response from /api/login is not valid JSON: {e}\"\n    assert isinstance(login_json, dict), \"Response JSON from /api/login is not a dictionary\"\n\n    # Prepare dummy file content for upload endpoints (empty small text file in-memory)\n    dummy_file_content = b\"Test file content for multi-tenant isolation.\"\n    dummy_file = {'file': ('test.txt', dummy_file_content, 'text/plain')}\n\n    # Test /api/file/upload\n    file_upload_url = f\"{BASE_URL}/api/file/upload\"\n    try:\n        file_upload_response = requests.post(file_upload_url, files=dummy_file, headers={}, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"File upload request failed unexpectedly: {e}\"\n    # Accept header may not apply for file upload; checking content-type response\n    assert file_upload_response.headers.get('Content-Type', '').startswith('application/json'), \\\n        f\"Expected JSON response content-type for /api/file/upload, got {file_upload_response.headers.get('Content-Type')}\"\n    # Status code generally 200 or 201; check that too\n    assert file_upload_response.status_code in (200, 201, 400, 401, 403), \\\n        f\"Unexpected status code for /api/file/upload: {file_upload_response.status_code}\"\n    try:\n        file_upload_json = file_upload_response.json()\n    except Exception as e:\n        assert False, f\"Response from /api/file/upload is not valid JSON: {e}\"\n    assert isinstance(file_upload_json, dict), \"Response JSON from /api/file/upload is not a dictionary\"\n\n    # Test /api/documents/upload\n    documents_upload_url = f\"{BASE_URL}/api/documents/upload\"\n    try:\n        doc_upload_response = requests.post(documents_upload_url, files=dummy_file, headers={}, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Documents upload request failed unexpectedly: {e}\"\n    assert doc_upload_response.headers.get('Content-Type', '').startswith('application/json'), \\\n        f\"Expected JSON response content-type for /api/documents/upload, got {doc_upload_response.headers.get('Content-Type')}\"\n    assert doc_upload_response.status_code in (200, 201, 400, 401, 403), \\\n        f\"Unexpected status code for /api/documents/upload: {doc_upload_response.status_code}\"\n    try:\n        doc_upload_json = doc_upload_response.json()\n    except Exception as e:\n        assert False, f\"Response from /api/documents/upload is not valid JSON: {e}\"\n    assert isinstance(doc_upload_json, dict), \"Response JSON from /api/documents/upload is not a dictionary\"\n\n\ntest_multi_tenant_data_isolation_and_row_level_security()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.554Z",
    "modified": "2025-09-17T19:59:28.062Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "fd558c16-ef44-4ef7-b649-f8768929df39",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC006-test dashboard api for real time financial and operational metrics",
    "description": "Validate the dashboard API endpoints provide accurate real-time financial statistics, document processing metrics, and AI performance data for authorized users.",
    "code": "import requests\nfrom requests.exceptions import RequestException, Timeout\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_dashboard_api_real_time_metrics():\n    \"\"\"Test /api/login, /api/file/upload, /api/documents/upload endpoints for JSON responses and no HTML\"\"\"\n    headers_json = {\n        \"Accept\": \"application/json\"\n    }\n    session = requests.Session()\n\n    # 1. Test /api/login endpoint: POST with sample credentials, expect JSON response\n    login_url = f\"{BASE_URL}/api/login\"\n    login_payload = {\n        \"username\": \"testuser@example.com\",\n        \"password\": \"TestPass123!\"\n    }\n    try:\n        login_resp = session.post(login_url, json=login_payload, headers=headers_json, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login status code {login_resp.status_code} != 200\"\n        try:\n            login_json = login_resp.json()\n        except ValueError:\n            raise AssertionError(\"Login response is not JSON\")\n        # Basic validation of expected keys in login response\n        assert \"token\" in login_json or \"accessToken\" in login_json or \"user\" in login_json, \\\n            \"Login JSON response missing expected keys (token or user)\"\n    except (RequestException, Timeout) as e:\n        raise AssertionError(f\"Login request failed: {e}\")\n\n    # Prepare auth header if token returned\n    auth_token = login_json.get(\"token\") or login_json.get(\"accessToken\")\n    auth_headers = headers_json.copy()\n    if auth_token:\n        auth_headers[\"Authorization\"] = f\"Bearer {auth_token}\"\n\n\n    # 2. Test /api/file/upload endpoint: POST file upload, expect JSON response (no HTML)\n    file_upload_url = f\"{BASE_URL}/api/file/upload\"\n    # Create a small dummy file content in-memory\n    dummy_file_content = b\"Dummy file content for testing\"\n    files = {\n        \"file\": (\"testfile.txt\", dummy_file_content, \"text/plain\"),\n    }\n    try:\n        upload_resp = session.post(file_upload_url, headers=auth_headers, files=files, timeout=TIMEOUT)\n        assert upload_resp.status_code in (200, 201), f\"File upload status code {upload_resp.status_code} not 200 or 201\"\n        # Assert content type is application/json or compatible\n        ct = upload_resp.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in ct.lower(), f\"File upload Content-Type not JSON: {ct}\"\n        try:\n            upload_json = upload_resp.json()\n        except ValueError:\n            raise AssertionError(\"File upload response is not JSON\")\n        # Basic check that response JSON is a dict/object\n        assert isinstance(upload_json, dict), \"File upload JSON response is not an object\"\n    except (RequestException, Timeout) as e:\n        raise AssertionError(f\"File upload request failed: {e}\")\n\n    # 3. Test /api/documents/upload endpoint: POST with file, expect JSON response (no HTML)\n    doc_upload_url = f\"{BASE_URL}/api/documents/upload\"\n    # Reuse dummy file content\n    files = {\n        \"file\": (\"document.pdf\", dummy_file_content, \"application/pdf\"),\n    }\n    try:\n        doc_resp = session.post(doc_upload_url, headers=auth_headers, files=files, timeout=TIMEOUT)\n        assert doc_resp.status_code in (200, 201), f\"Documents upload status code {doc_resp.status_code} not 200 or 201\"\n        ct = doc_resp.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in ct.lower(), f\"Documents upload Content-Type not JSON: {ct}\"\n        try:\n            doc_json = doc_resp.json()\n        except ValueError:\n            raise AssertionError(\"Documents upload response is not JSON\")\n        assert isinstance(doc_json, dict), \"Documents upload JSON response is not an object\"\n    except (RequestException, Timeout) as e:\n        raise AssertionError(f\"Documents upload request failed: {e}\")\n\ntest_dashboard_api_real_time_metrics()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 81, in <module>\n  File \"<string>\", line 22, in test_dashboard_api_real_time_metrics\nAssertionError: Login status code 401 != 200\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.560Z",
    "modified": "2025-09-17T19:59:32.886Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "bd611831-d3a2-401f-ad79-74738a9d21b9",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC007-test financial management endpoints for expense and supplier tracking",
    "description": "Test the financial management APIs to ensure correct handling of expense tracking, supplier and client management, cost centers, and category hierarchies.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\n\ndef test_financial_management_upload_and_auth_endpoints():\n    # Test /api/login endpoint returns JSON and handles authentication\n    login_url = f\"{BASE_URL}/api/login\"\n    login_payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n    headers = {\"Accept\": \"application/json\"}\n\n    # Send POST to /api/login\n    login_response = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n    try:\n        login_response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"/api/login request failed: {e}\"\n    try:\n        login_json = login_response.json()\n    except ValueError:\n        assert False, \"/api/login response is not valid JSON\"\n    # Assert JSON response contains expected keys (e.g., token, user)\n    assert isinstance(login_json, dict), \"/api/login response JSON is not a dictionary\"\n    assert \"token\" in login_json or \"error\" in login_json, \"/api/login JSON missing 'token' or 'error' key\"\n\n    token = login_json.get(\"token\")\n    auth_headers = {\n        \"Authorization\": f\"Bearer {token}\" if token else \"\",\n        \"Accept\": \"application/json\"\n    }\n\n    # Test /api/file/upload endpoint returns JSON (file upload simulation)\n    file_upload_url = f\"{BASE_URL}/api/file/upload\"\n    # Create sample file content in memory\n    files = {\n        \"file\": (\"test_document.txt\", b\"Sample file content for upload test\", \"text/plain\")\n    }\n    try:\n        file_upload_resp = requests.post(file_upload_url, headers=auth_headers, files=files, timeout=TIMEOUT)\n        file_upload_resp.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"/api/file/upload request failed: {e}\"\n    # Check JSON response, not HTML\n    content_type = file_upload_resp.headers.get(\"Content-Type\", \"\")\n    assert \"application/json\" in content_type.lower(), \"/api/file/upload response Content-Type is not JSON\"\n    try:\n        file_upload_json = file_upload_resp.json()\n    except ValueError:\n        assert False, \"/api/file/upload response is not valid JSON\"\n    assert isinstance(file_upload_json, dict), \"/api/file/upload response JSON is not a dictionary\"\n\n    # Test /api/documents/upload endpoint returns JSON (document upload simulation)\n    documents_upload_url = f\"{BASE_URL}/api/documents/upload\"\n    # Similar file upload with minimal dummy content\n    doc_files = {\n        \"document\": (\"invoice.pdf\", b\"%PDF-1.4 dummy pdf content\", \"application/pdf\")\n    }\n    try:\n        doc_upload_resp = requests.post(documents_upload_url, headers=auth_headers, files=doc_files, timeout=TIMEOUT)\n        doc_upload_resp.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"/api/documents/upload request failed: {e}\"\n    content_type_doc = doc_upload_resp.headers.get(\"Content-Type\", \"\")\n    assert \"application/json\" in content_type_doc.lower(), \"/api/documents/upload response Content-Type is not JSON\"\n    try:\n        doc_upload_json = doc_upload_resp.json()\n    except ValueError:\n        assert False, \"/api/documents/upload response is not valid JSON\"\n    assert isinstance(doc_upload_json, dict), \"/api/documents/upload response JSON is not a dictionary\"\n\n\ntest_financial_management_upload_and_auth_endpoints()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 19, in test_financial_management_upload_and_auth_endpoints\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3001/api/login\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 76, in <module>\n  File \"<string>\", line 21, in test_financial_management_upload_and_auth_endpoints\nAssertionError: /api/login request failed: 401 Client Error: Unauthorized for url: http://localhost:3001/api/login\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.567Z",
    "modified": "2025-09-17T19:59:32.889Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "94b2fff0-2b2b-43be-8519-447d349a557d",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC008-test document workflow status transitions",
    "description": "Verify that document workflow APIs correctly automate status transitions based on business rules and dates, reflecting accurate document lifecycle states.",
    "code": "import requests\nimport io\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_document_workflow_status_transitions():\n    session = requests.Session()\n    try:\n        # Step 1: Test /api/login endpoint for JSON response format (simulate a login)\n        login_payload = {\n            \"username\": \"testclientuser\",\n            \"password\": \"TestPassword123!\"\n        }\n        login_resp = session.post(\n            f\"{BASE_URL}/api/login\",\n            json=login_payload,\n            timeout=TIMEOUT,\n        )\n        assert login_resp.status_code in (200, 201, 202), f\"Login failed with status {login_resp.status_code}\"\n        try:\n            login_json = login_resp.json()\n        except Exception:\n            assert False, \"Login response is not JSON\"\n        assert isinstance(login_json, dict), \"Login response JSON is not a dict\"\n\n        # Step 2: Test /api/file/upload endpoint for JSON response (upload a dummy file)\n        # Construct a small dummy file in-memory for upload\n        dummy_file_content = b\"%PDF-1.4\\n%Dummy PDF content for test\\n\"\n        files = {\n            \"file\": (\"testdocument.pdf\", io.BytesIO(dummy_file_content), \"application/pdf\")\n        }\n        upload_file_resp = session.post(\n            f\"{BASE_URL}/api/file/upload\",\n            files=files,\n            timeout=TIMEOUT,\n        )\n        assert upload_file_resp.status_code in (200, 201), f\"/api/file/upload failed with status {upload_file_resp.status_code}\"\n        try:\n            upload_file_json = upload_file_resp.json()\n        except Exception:\n            assert False, \"/api/file/upload response is not JSON\"\n        assert isinstance(upload_file_json, dict), \"/api/file/upload response JSON is not a dict\"\n        file_upload_id = upload_file_json.get(\"id\") or upload_file_json.get(\"fileId\") or upload_file_json.get(\"file_id\")\n        assert file_upload_id, \"Uploaded file ID missing from /api/file/upload response\"\n\n        # Step 3: Test /api/documents/upload endpoint for JSON response, uploading the file ID\n        # Usually this endpoint probably expects metadata and a reference to file or actual file upload, try both:\n        document_payload = {\n            \"fileId\": file_upload_id,\n            \"documentType\": \"PAGO\",  # example document type from user flow summary\n            \"metadata\": {\n                \"dueDate\": \"2025-12-31\",\n                \"amount\": 1000.00,\n                \"supplier\": \"Test Supplier\",\n                \"tenantId\": \"tenant_test_01\"\n            }\n        }\n        doc_upload_resp = session.post(\n            f\"{BASE_URL}/api/documents/upload\",\n            json=document_payload,\n            timeout=TIMEOUT,\n        )\n        assert doc_upload_resp.status_code in (200, 201), f\"/api/documents/upload failed with status {doc_upload_resp.status_code}\"\n        try:\n            doc_upload_json = doc_upload_resp.json()\n        except Exception:\n            assert False, \"/api/documents/upload response is not JSON\"\n        assert isinstance(doc_upload_json, dict), \"/api/documents/upload response JSON is not a dict\"\n        document_id = doc_upload_json.get(\"id\") or doc_upload_json.get(\"documentId\") or doc_upload_json.get(\"document_id\")\n        assert document_id, \"Document ID missing from /api/documents/upload response\"\n\n        # Step 4: Optionally, check the workflow status transitions by querying the document status\n        # The PRD implies automated workflow status transitions based on business rules,\n        # but no explicit endpoint given - however, we can try to GET the document to check status.\n        get_doc_resp = session.get(\n            f\"{BASE_URL}/api/documents/{document_id}\",\n            timeout=TIMEOUT,\n        )\n        assert get_doc_resp.status_code == 200, f\"Fetching document status failed with status {get_doc_resp.status_code}\"\n        try:\n            get_doc_json = get_doc_resp.json()\n        except Exception:\n            assert False, \"Document GET response is not JSON\"\n        assert \"status\" in get_doc_json, \"Document status field missing in GET response\"\n\n        status = get_doc_json[\"status\"]\n        allowed_statuses = [\"RECEBIDO\", \"VALIDANDO\", \"PAGO_A_CONCILIAR\", \"EM_CONCILIACAO\", \"ARQUIVADO\"]\n        assert status in allowed_statuses, f\"Document status '{status}' not in expected workflow states\"\n\n    finally:\n        # Clean up created resources if possible\n        # Delete document if created\n        if 'document_id' in locals():\n            try:\n                del_doc_resp = session.delete(\n                    f\"{BASE_URL}/api/documents/{document_id}\",\n                    timeout=TIMEOUT,\n                )\n                # Accept 200 or 204 as success\n                assert del_doc_resp.status_code in (200, 204, 404)\n            except Exception:\n                pass\n\n        # Delete uploaded file if created\n        if 'file_upload_id' in locals():\n            try:\n                del_file_resp = session.delete(\n                    f\"{BASE_URL}/api/file/{file_upload_id}\",\n                    timeout=TIMEOUT,\n                )\n                assert del_file_resp.status_code in (200, 204, 404)\n            except Exception:\n                pass\n\n\ntest_document_workflow_status_transitions()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 117, in <module>\n  File \"<string>\", line 20, in test_document_workflow_status_transitions\nAssertionError: Login failed with status 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.573Z",
    "modified": "2025-09-17T19:59:32.892Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "2b8cd73c-3861-4e0f-bde3-8e34d1134443",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC009-test file storage and upload handling",
    "description": "Test the file storage and upload endpoints to ensure support for multiple document formats, local and cloud storage integration, and file integrity validation.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\n\ndef test_file_storage_and_upload_handling():\n    \"\"\"\n    Test the upload endpoints /api/file/upload, /api/documents/upload and authentication /api/login\n    to verify they return JSON responses (not HTML), supporting multiple document formats,\n    and validating file integrity.\n    \"\"\"\n\n    # Sample credentials for login (adjust as needed)\n    login_payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n\n    # 1) Test authentication endpoint /api/login - POST\n    try:\n        login_response = requests.post(\n            f\"{BASE_URL}/api/login\",\n            json=login_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n    except requests.RequestException as e:\n        assert False, f\"Login request failed: {e}\"\n\n    assert login_response.status_code == 200, f\"Expected 200 OK for /api/login, got {login_response.status_code}\"\n    try:\n        login_json = login_response.json()\n    except ValueError:\n        assert False, \"Login response is not JSON\"\n    # Basic check for presence of a token or user info field\n    assert any(k in login_json for k in (\"token\", \"accessToken\", \"user\")), \"Login response JSON missing token/user info\"\n\n    token = login_json.get(\"token\") or login_json.get(\"accessToken\")\n    assert token, \"Token not found in login response\"\n\n    auth_headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n\n    # Prepare a set of sample files for upload testing with minimal binary content.\n    # For testing purposes, small bytes content simulating different file types:\n    test_files = [\n        (\"document.pdf\", b\"%PDF-1.4\\n%EOF\\n\", \"application/pdf\"),\n        (\"image.png\", b\"\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\", \"image/png\"),\n        (\"text.txt\", b\"Sample text content\", \"text/plain\"),\n        (\"spreadsheet.xlsx\", b\"PK\\x03\\x04\\x14\\x00\\x06\\x00\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n    ]\n\n    # 2) Test /api/file/upload endpoint - POST with files\n    for filename, filedata, mimetype in test_files:\n        files = {\n            \"file\": (filename, filedata, mimetype)\n        }\n        try:\n            response = requests.post(\n                f\"{BASE_URL}/api/file/upload\",\n                headers={**headers, **auth_headers},\n                files=files,\n                timeout=TIMEOUT\n            )\n        except requests.RequestException as e:\n            assert False, f\"/api/file/upload request failed for {filename}: {e}\"\n\n        assert response.status_code == 200, f\"/api/file/upload expected 200 OK for {filename}, got {response.status_code}\"\n        # Response should be JSON\n        try:\n            resp_json = response.json()\n        except ValueError:\n            assert False, f\"/api/file/upload response for {filename} is not JSON\"\n        # Basic file upload response validation: expect file info or success msg\n        assert isinstance(resp_json, dict), f\"/api/file/upload response JSON invalid for {filename}\"\n\n    # 3) Test /api/documents/upload endpoint - POST with files\n    for filename, filedata, mimetype in test_files:\n        files = {\n            \"document\": (filename, filedata, mimetype)\n        }\n        try:\n            response = requests.post(\n                f\"{BASE_URL}/api/documents/upload\",\n                headers={**headers, **auth_headers},\n                files=files,\n                timeout=TIMEOUT\n            )\n        except requests.RequestException as e:\n            assert False, f\"/api/documents/upload request failed for {filename}: {e}\"\n\n        assert response.status_code == 200, f\"/api/documents/upload expected 200 OK for {filename}, got {response.status_code}\"\n        try:\n            resp_json = response.json()\n        except ValueError:\n            assert False, f\"/api/documents/upload response for {filename} is not JSON\"\n        assert isinstance(resp_json, dict), f\"/api/documents/upload response JSON invalid for {filename}\"\n\ntest_file_storage_and_upload_handling()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 103, in <module>\n  File \"<string>\", line 33, in test_file_storage_and_upload_handling\nAssertionError: Expected 200 OK for /api/login, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.578Z",
    "modified": "2025-09-17T19:59:48.717Z"
  },
  {
    "projectId": "3955d29c-517a-467a-9f37-6dea248f6965",
    "testId": "bdc0699b-b41b-455c-b477-85004e7a72f2",
    "userId": "3438f428-f071-7054-b820-5622b88c3e72",
    "title": "TC010-test api endpoints for authentication document and entity operations",
    "description": "Validate all RESTful API endpoints for authentication, document management, and entity operations to ensure correct request handling, response structure, and error management.",
    "code": "import requests\nfrom requests.exceptions import RequestException\n\nBASE_URL = \"http://localhost:3001\"\nTIMEOUT = 30\nHEADERS_JSON = {\"Accept\": \"application/json\"}\n\ndef test_api_endpoints_authentication_and_uploads():\n    # Test /api/login endpoint (authentication)\n    login_url = f\"{BASE_URL}/api/login\"\n    login_payload = {\n        \"username\": \"testuser\",\n        \"password\": \"testpassword\"\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, headers=HEADERS_JSON, timeout=TIMEOUT)\n        assert login_resp.status_code in (200, 401, 403)\n        content_type = login_resp.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in content_type, f\"/api/login returned non-JSON content-type: {content_type}\"\n        # If success, parse JSON\n        if login_resp.status_code == 200:\n            data = login_resp.json()\n            assert \"token\" in data or \"session\" in data or \"user\" in data, \"Login success response missing expected keys\"\n    except RequestException as e:\n        assert False, f\"RequestException for /api/login: {e}\"\n\n    # Test /api/file/upload endpoint (file upload)\n    upload_file_url = f\"{BASE_URL}/api/file/upload\"\n    # Prepare a dummy in-memory file\n    file_content = b\"Dummy file content for testing\"\n    files = {\n        \"file\": (\"dummy.txt\", file_content, \"text/plain\")\n    }\n    try:\n        upload_file_resp = requests.post(upload_file_url, files=files, headers={\"Accept\": \"application/json\"}, timeout=TIMEOUT)\n        content_type = upload_file_resp.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in content_type, f\"/api/file/upload returned non-JSON content-type: {content_type}\"\n        assert upload_file_resp.status_code in (200, 400, 401, 403), f\"Unexpected status code for /api/file/upload: {upload_file_resp.status_code}\"\n        try:\n            upload_file_resp.json()\n        except ValueError:\n            assert False, \"/api/file/upload response content is not valid JSON\"\n    except RequestException as e:\n        assert False, f\"RequestException for /api/file/upload: {e}\"\n\n    # Test /api/documents/upload endpoint (document upload)\n    upload_doc_url = f\"{BASE_URL}/api/documents/upload\"\n    # Prepare dummy file upload as well, with a likely accepted mimetype for documents, e.g., PDF\n    dummy_pdf_content = b\"%PDF-1.4\\n%Dummy PDF content\\n\"\n    files = {\n        \"document\": (\"dummy.pdf\", dummy_pdf_content, \"application/pdf\")\n    }\n    try:\n        upload_doc_resp = requests.post(upload_doc_url, files=files, headers={\"Accept\": \"application/json\"}, timeout=TIMEOUT)\n        content_type = upload_doc_resp.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in content_type, f\"/api/documents/upload returned non-JSON content-type: {content_type}\"\n        assert upload_doc_resp.status_code in (200, 400, 401, 403), f\"Unexpected status code for /api/documents/upload: {upload_doc_resp.status_code}\"\n        try:\n            upload_doc_resp.json()\n        except ValueError:\n            assert False, \"/api/documents/upload response content is not valid JSON\"\n    except RequestException as e:\n        assert False, f\"RequestException for /api/documents/upload: {e}\"\n\n\ntest_api_endpoints_authentication_and_uploads()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-17T19:58:51.586Z",
    "modified": "2025-09-17T19:59:32.884Z"
  }
]
